/**
 * Athena Component
 * Knowledge graph and entity management interface
 */

class AthenaComponent {
    constructor() {
        this.state = {
            initialized: false,
            activeTab: 'chat', // Default tab
            graphLoaded: false,
            entitiesLoaded: false
        };
    }
    
    /**
     * Initialize the component
     */
    init() {
        console.log('Initializing Athena component');
        
        // If already initialized, just activate
        if (this.state.initialized) {
            console.log('Athena component already initialized, just activating');
            this.activateComponent();
            return this;
        }
        
        // Load component HTML
        this.loadComponentHTML();
        
        // Mark as initialized
        this.state.initialized = true;
        
        return this;
    }
    
    /**
     * Activate the component interface
     */
    activateComponent() {
        console.log('Activating Athena component');
        
        // Make sure we're using the HTML panel
        if (window.uiUtils) {
            window.uiUtils.activatePanel('html');
        } else if (window.uiManager) {
            window.uiManager.activatePanel('html');
        }
        
        // Update the status indicator
        const statusIndicator = document.querySelector('.nav-item[data-component="athena"] .status-indicator');
        if (statusIndicator) {
            statusIndicator.classList.add('active');
        }
    }
    
    /**
     * Load the component HTML
     */
    async loadComponentHTML() {
        console.log('Loading Athena component HTML');
        
        // Get HTML panel for component rendering
        const htmlPanel = document.getElementById('html-panel');
        if (!htmlPanel) {
            console.error('HTML panel not found!');
            return;
        }
        
        try {
            // Show loading indicator
            if (window.uiUtils) {
                window.uiUtils.showLoadingIndicator(htmlPanel, 'Athena');
            } else {
                htmlPanel.innerHTML = '<div style="padding: 20px;">Loading Athena component...</div>';
            }
            
            // Fetch component HTML template with cache busting
            const cacheBuster = `?t=${new Date().getTime()}`;
            const response = await fetch(`components/athena/athena-component.html${cacheBuster}`);
            
            if (!response.ok) {
                throw new Error(`Failed to load Athena template: ${response.status}`);
            }
            
            const html = await response.text();
            
            // Insert HTML into panel
            htmlPanel.innerHTML = html;
            
            // Setup component functionality
            this.setupTabs();
            this.setupChat();
            
            console.log('Athena component HTML loaded successfully');
        } catch (error) {
            console.error('Error loading Athena component:', error);
            if (window.uiUtils) {
                window.uiUtils.showErrorMessage(htmlPanel, 'Athena', error.message);
            } else {
                htmlPanel.innerHTML = `
                    <div class="error-message">
                        <h3>Error Loading Athena Component</h3>
                        <p>${error.message}</p>
                    </div>
                `;
            }
        }
    }
    
    /**
     * Set up tab switching functionality
     */
    setupTabs() {
        console.log('Setting up Athena tabs');
        
        const tabs = document.querySelectorAll('.athena-tab');
        const panels = document.querySelectorAll('.athena-panel');
        
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                // Update active tab
                tabs.forEach(t => {
                    t.classList.remove('active');
                    t.style.borderBottomColor = 'transparent';
                });
                tab.classList.add('active');
                tab.style.borderBottomColor = '#007bff';
                
                // Show active panel
                const panelId = tab.getAttribute('data-tab') + '-panel';
                panels.forEach(panel => {
                    panel.style.display = 'none';
                    panel.classList.remove('active');
                });
                const activePanel = document.getElementById(panelId);
                if (activePanel) {
                    activePanel.style.display = 'block';
                    activePanel.classList.add('active');
                }
                
                // Show/hide the clear chat button in the menu bar based on active tab
                const clearChatBtn = document.getElementById('clear-chat-btn');
                if (clearChatBtn) {
                    const panelType = tab.getAttribute('data-tab');
                    clearChatBtn.style.display = (panelType === 'chat' || panelType === 'teamchat') ? 'block' : 'none';
                }
                
                // Update the active tab in state
                this.state.activeTab = tab.getAttribute('data-tab');
                
                // Load tab-specific content if needed
                this.loadTabContent(this.state.activeTab);
            });
        });
        
        // Set up clear chat button
        const clearChatBtn = document.getElementById('clear-chat-btn');
        if (clearChatBtn) {
            clearChatBtn.addEventListener('click', () => this.clearActiveChat());
        }
    }
    
    /**
     * Load content specific to a tab
     * @param {string} tabId - The ID of the tab to load content for
     */
    loadTabContent(tabId) {
        console.log(`Loading content for ${tabId} tab`);
        
        switch (tabId) {
            case 'graph':
                if (!this.state.graphLoaded) {
                    this.initializeGraph();
                    this.state.graphLoaded = true;
                }
                break;
            case 'entities':
                if (!this.state.entitiesLoaded) {
                    this.loadEntities();
                    this.state.entitiesLoaded = true;
                }
                break;
            case 'query':
                // Initialize query panel if needed
                break;
            case 'chat':
            case 'teamchat':
                // These are loaded by setupChat
                break;
        }
    }
    
    /**
     * Initialize the graph visualization
     */
    initializeGraph() {
        console.log('Initializing knowledge graph visualization');
        
        // If we have a real graph implementation, it would be initialized here
        // For now, we'll just show a placeholder
        const graphContainer = document.getElementById('graph-container');
        const placeholder = document.getElementById('graph-placeholder');
        
        if (graphContainer && placeholder) {
            // In a real implementation, we would:
            // 1. Fetch graph data from the backend
            // 2. Initialize a graph visualization library (like D3, Sigma, etc.)
            // 3. Render the graph in the container
            
            // For demo purposes, just update the placeholder
            placeholder.innerHTML = `
                <div style="text-align: center; padding: 2rem;">
                    <h2 style="color: #999; margin-bottom: 1rem;">Knowledge Graph View</h2>
                    <p style="color: #777; max-width: 600px; margin: 0 auto;">
                        This is a placeholder for the knowledge graph visualization.
                        In a real implementation, this would show an interactive graph of entities and relationships.
                    </p>
                </div>
            `;
        }
    }
    
    /**
     * Load entities for the entity list
     */
    loadEntities() {
        console.log('Loading entities');
        
        const entityList = document.getElementById('entity-list-items');
        const loading = document.getElementById('entity-list-loading');
        
        if (entityList && loading) {
            // In a real implementation, we would fetch entities from the backend
            // For now, just show some sample entities after a delay
            setTimeout(() => {
                loading.style.display = 'none';
                entityList.style.display = 'block';
            }, 1000);
        }
    }
    
    /**
     * Set up chat functionality
     */
    setupChat() {
        console.log('Setting up Athena chat');
        
        // Set up knowledge chat
        this.setupChatInput('chat-input', 'send-button', 'chat-messages');
        
        // Set up team chat
        this.setupChatInput('teamchat-input', 'teamchat-send-button', 'teamchat-messages');
    }
    
    /**
     * Set up a chat input and send button
     * @param {string} inputId - ID of the input element
     * @param {string} buttonId - ID of the send button
     * @param {string} messagesId - ID of the messages container
     */
    setupChatInput(inputId, buttonId, messagesId) {
        const input = document.getElementById(inputId);
        const button = document.getElementById(buttonId);
        const messages = document.getElementById(messagesId);
        
        if (!input || !button || !messages) {
            console.error(`Missing elements for chat setup: ${inputId}, ${buttonId}, ${messagesId}`);
            return;
        }
        
        // If we have UI utils, use those
        if (window.uiUtils) {
            window.uiUtils.setupChatInterface(inputId, buttonId, messagesId, 
                (message) => this.sendChatMessage(message, messages));
            return;
        }
        
        // Otherwise, set up manually
        
        // Set up auto-resize
        input.addEventListener('input', () => this.autoResizeInput(input));
        
        // Send message on button click
        button.addEventListener('click', () => this.sendChatMessage(input.value.trim(), messages));
        
        // Send message on Enter key (but allow Shift+Enter for new lines)
        input.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                this.sendChatMessage(input.value.trim(), messages);
                input.value = '';
                this.resetInputHeight(input);
            }
        });
    }
    
    /**
     * Auto-resize a chat input based on its content
     * @param {HTMLElement} input - The input element to resize
     */
    autoResizeInput(input) {
        const container = input.parentElement;
        if (!container) return;
        
        // Save the current input value
        const value = input.value;
        
        // Create a hidden div with same styling to measure text
        const hiddenDiv = document.createElement('div');
        hiddenDiv.style.position = 'absolute';
        hiddenDiv.style.top = '-9999px';
        hiddenDiv.style.width = input.offsetWidth + 'px';
        hiddenDiv.style.padding = window.getComputedStyle(input).padding;
        hiddenDiv.style.border = window.getComputedStyle(input).border;
        hiddenDiv.style.fontSize = window.getComputedStyle(input).fontSize;
        hiddenDiv.style.fontFamily = window.getComputedStyle(input).fontFamily;
        hiddenDiv.style.lineHeight = window.getComputedStyle(input).lineHeight;
        
        // Set content and add to document
        hiddenDiv.textContent = value || 'x';
        document.body.appendChild(hiddenDiv);
        
        // Measure the height (with minimum)
        const contentHeight = hiddenDiv.offsetHeight;
        const minHeight = 24; // Minimum height for single line
        const maxHeight = 100; // Maximum height before scrolling
        
        // Remove the hidden div
        document.body.removeChild(hiddenDiv);
        
        // Set height of container and input
        const newHeight = Math.min(Math.max(contentHeight, minHeight), maxHeight);
        container.style.height = (newHeight + 20) + 'px'; // Add padding
        
        // If content is larger than max, enable scrolling
        if (contentHeight > maxHeight) {
            input.style.overflowY = 'auto';
        } else {
            input.style.overflowY = 'hidden';
        }
    }
    
    /**
     * Send a chat message
     * @param {string} message - The message text
     * @param {HTMLElement} messages - The messages container
     */
    sendChatMessage(message, messages) {
        if (!message) return;
        
        // Add user message to chat in a bubble
        this.addUserMessageToChatUI(messages, message);
        
        // Call Athena service if available
        if (window.athenaService) {
            window.athenaService.sendMessage(message);
        } else {
            console.log('Athena service not available, simulating response');
            // Simulate response for testing
            setTimeout(() => {
                this.addAIMessageToChatUI(messages, 'I received your message: "' + message + 
                    '". This is a simulated response since the Athena service is not available.');
            }, 1000);
        }
    }
    
    /**
     * Add a user message to the chat UI
     * @param {HTMLElement} messages - The messages container element
     * @param {string} message - The message text
     */
    addUserMessageToChatUI(messages, message) {
        if (!messages) return;
        
        const userBubble = document.createElement('div');
        userBubble.className = 'chat-message user-message';
        userBubble.style.padding = '0.75rem 1rem';
        userBubble.style.margin = '0.5rem 1rem';
        userBubble.style.backgroundColor = '#1e3a8a';
        userBubble.style.borderRadius = '1rem 1rem 0 1rem';
        userBubble.style.maxWidth = '80%';
        userBubble.style.alignSelf = 'flex-end';
        userBubble.style.color = '#f0f0f0';
        userBubble.textContent = message;
        messages.appendChild(userBubble);
        messages.scrollTop = messages.scrollHeight;
    }
    
    /**
     * Add an AI message to the chat UI
     * @param {HTMLElement} messages - The messages container element
     * @param {string} message - The message text
     */
    addAIMessageToChatUI(messages, message) {
        if (!messages) return;
        
        const aiBubble = document.createElement('div');
        aiBubble.className = 'chat-message ai-message';
        aiBubble.style.padding = '0.75rem 1rem';
        aiBubble.style.margin = '0.5rem 1rem';
        aiBubble.style.backgroundColor = '#252525';
        aiBubble.style.borderRadius = '1rem 1rem 1rem 0';
        aiBubble.style.maxWidth = '80%';
        aiBubble.style.alignSelf = 'flex-start';
        aiBubble.style.color = '#f0f0f0';
        aiBubble.textContent = message;
        messages.appendChild(aiBubble);
        messages.scrollTop = messages.scrollHeight;
    }
    
    /**
     * Reset the height of an input element
     * @param {HTMLElement} input - The input element to reset
     */
    resetInputHeight(input) {
        const container = input.parentElement;
        if (container) {
            container.style.height = '2.5rem';
            container.style.minHeight = '2.5rem';
        }
        input.style.overflowY = 'hidden';
    }
    
    /**
     * Clear the active chat messages
     */
    clearActiveChat() {
        let messagesContainer;
        
        // Determine which chat is active
        if (this.state.activeTab === 'chat') {
            messagesContainer = document.getElementById('chat-messages');
        } else if (this.state.activeTab === 'teamchat') {
            messagesContainer = document.getElementById('teamchat-messages');
        }
        
        if (messagesContainer) {
            // Keep only the welcome message
            const welcomeMessage = messagesContainer.querySelector('.chat-message:first-child');
            messagesContainer.innerHTML = '';
            if (welcomeMessage) {
                messagesContainer.appendChild(welcomeMessage);
            }
        }
    }
}

// Create global instance
window.athenaComponent = new AthenaComponent();

// Add handler to component activation
document.addEventListener('DOMContentLoaded', function() {
    const athenaTab = document.querySelector('.nav-item[data-component="athena"]');
    if (athenaTab) {
        athenaTab.addEventListener('click', function() {
            // Initialize component if not already done
            if (window.athenaComponent) {
                window.athenaComponent.init();
            }
        });
    }
});