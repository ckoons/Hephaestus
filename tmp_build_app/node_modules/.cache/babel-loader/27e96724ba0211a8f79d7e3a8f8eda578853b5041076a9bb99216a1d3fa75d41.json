{"ast":null,"code":"/**\n * Simple component input storage using localStorage\n * This ensures input context persists even on page reload\n */// Get input context for a component\nexport const getInputContext=componentId=>{try{const storageKey=`tekton_input_${componentId}`;const storedValue=localStorage.getItem(storageKey);console.log(`[Storage] Getting input for component: ${componentId}`,storedValue?`(${storedValue.length} chars)`:'(empty)');return storedValue||'';}catch(e){console.error(`[Storage] Error getting input for ${componentId}:`,e);return'';}};// Save input context for a component\nexport const saveInputContext=(componentId,text)=>{try{const storageKey=`tekton_input_${componentId}`;if(text&&text.trim()){localStorage.setItem(storageKey,text);console.log(`[Storage] Saved input for component: ${componentId} (${text.length} chars)`);}else{localStorage.removeItem(storageKey);console.log(`[Storage] Cleared input for component: ${componentId}`);}return true;}catch(e){console.error(`[Storage] Error saving input for ${componentId}:`,e);return false;}};// Clear input context for a component\nexport const clearInputContext=componentId=>{try{const storageKey=`tekton_input_${componentId}`;localStorage.removeItem(storageKey);console.log(`[Storage] Cleared input for component: ${componentId}`);return true;}catch(e){console.error(`[Storage] Error clearing input for ${componentId}:`,e);return false;}};// Get all stored component input contexts\nexport const getAllInputContexts=()=>{try{const contexts={};// Iterate through localStorage keys\nfor(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&key.startsWith('tekton_input_')){const componentId=key.replace('tekton_input_','');contexts[componentId]=localStorage.getItem(key)||'';}}console.log(`[Storage] Got all input contexts:`,Object.keys(contexts));return contexts;}catch(e){console.error(`[Storage] Error getting all contexts:`,e);return{};}};","map":{"version":3,"names":["getInputContext","componentId","storageKey","storedValue","localStorage","getItem","console","log","length","e","error","saveInputContext","text","trim","setItem","removeItem","clearInputContext","getAllInputContexts","contexts","i","key","startsWith","replace","Object","keys"],"sources":["/Users/cskoons/projects/github/Tekton/Hephaestus/src/src/utils/componentStorage.js"],"sourcesContent":["/**\n * Simple component input storage using localStorage\n * This ensures input context persists even on page reload\n */\n\n// Get input context for a component\nexport const getInputContext = (componentId) => {\n  try {\n    const storageKey = `tekton_input_${componentId}`;\n    const storedValue = localStorage.getItem(storageKey);\n    console.log(`[Storage] Getting input for component: ${componentId}`, storedValue ? `(${storedValue.length} chars)` : '(empty)');\n    return storedValue || '';\n  } catch (e) {\n    console.error(`[Storage] Error getting input for ${componentId}:`, e);\n    return '';\n  }\n};\n\n// Save input context for a component\nexport const saveInputContext = (componentId, text) => {\n  try {\n    const storageKey = `tekton_input_${componentId}`;\n    if (text && text.trim()) {\n      localStorage.setItem(storageKey, text);\n      console.log(`[Storage] Saved input for component: ${componentId} (${text.length} chars)`);\n    } else {\n      localStorage.removeItem(storageKey);\n      console.log(`[Storage] Cleared input for component: ${componentId}`);\n    }\n    return true;\n  } catch (e) {\n    console.error(`[Storage] Error saving input for ${componentId}:`, e);\n    return false;\n  }\n};\n\n// Clear input context for a component\nexport const clearInputContext = (componentId) => {\n  try {\n    const storageKey = `tekton_input_${componentId}`;\n    localStorage.removeItem(storageKey);\n    console.log(`[Storage] Cleared input for component: ${componentId}`);\n    return true;\n  } catch (e) {\n    console.error(`[Storage] Error clearing input for ${componentId}:`, e);\n    return false;\n  }\n};\n\n// Get all stored component input contexts\nexport const getAllInputContexts = () => {\n  try {\n    const contexts = {};\n    \n    // Iterate through localStorage keys\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith('tekton_input_')) {\n        const componentId = key.replace('tekton_input_', '');\n        contexts[componentId] = localStorage.getItem(key) || '';\n      }\n    }\n    \n    console.log(`[Storage] Got all input contexts:`, Object.keys(contexts));\n    return contexts;\n  } catch (e) {\n    console.error(`[Storage] Error getting all contexts:`, e);\n    return {};\n  }\n};"],"mappings":"AAAA;AACA;AACA;AACA,GAEA;AACA,MAAO,MAAM,CAAAA,eAAe,CAAIC,WAAW,EAAK,CAC9C,GAAI,CACF,KAAM,CAAAC,UAAU,CAAG,gBAAgBD,WAAW,EAAE,CAChD,KAAM,CAAAE,WAAW,CAAGC,YAAY,CAACC,OAAO,CAACH,UAAU,CAAC,CACpDI,OAAO,CAACC,GAAG,CAAC,0CAA0CN,WAAW,EAAE,CAAEE,WAAW,CAAG,IAAIA,WAAW,CAACK,MAAM,SAAS,CAAG,SAAS,CAAC,CAC/H,MAAO,CAAAL,WAAW,EAAI,EAAE,CAC1B,CAAE,MAAOM,CAAC,CAAE,CACVH,OAAO,CAACI,KAAK,CAAC,qCAAqCT,WAAW,GAAG,CAAEQ,CAAC,CAAC,CACrE,MAAO,EAAE,CACX,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,gBAAgB,CAAGA,CAACV,WAAW,CAAEW,IAAI,GAAK,CACrD,GAAI,CACF,KAAM,CAAAV,UAAU,CAAG,gBAAgBD,WAAW,EAAE,CAChD,GAAIW,IAAI,EAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAE,CACvBT,YAAY,CAACU,OAAO,CAACZ,UAAU,CAAEU,IAAI,CAAC,CACtCN,OAAO,CAACC,GAAG,CAAC,wCAAwCN,WAAW,KAAKW,IAAI,CAACJ,MAAM,SAAS,CAAC,CAC3F,CAAC,IAAM,CACLJ,YAAY,CAACW,UAAU,CAACb,UAAU,CAAC,CACnCI,OAAO,CAACC,GAAG,CAAC,0CAA0CN,WAAW,EAAE,CAAC,CACtE,CACA,MAAO,KAAI,CACb,CAAE,MAAOQ,CAAC,CAAE,CACVH,OAAO,CAACI,KAAK,CAAC,oCAAoCT,WAAW,GAAG,CAAEQ,CAAC,CAAC,CACpE,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,iBAAiB,CAAIf,WAAW,EAAK,CAChD,GAAI,CACF,KAAM,CAAAC,UAAU,CAAG,gBAAgBD,WAAW,EAAE,CAChDG,YAAY,CAACW,UAAU,CAACb,UAAU,CAAC,CACnCI,OAAO,CAACC,GAAG,CAAC,0CAA0CN,WAAW,EAAE,CAAC,CACpE,MAAO,KAAI,CACb,CAAE,MAAOQ,CAAC,CAAE,CACVH,OAAO,CAACI,KAAK,CAAC,sCAAsCT,WAAW,GAAG,CAAEQ,CAAC,CAAC,CACtE,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAQ,mBAAmB,CAAGA,CAAA,GAAM,CACvC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,CAAC,CAAC,CAEnB;AACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGf,YAAY,CAACI,MAAM,CAAEW,CAAC,EAAE,CAAE,CAC5C,KAAM,CAAAC,GAAG,CAAGhB,YAAY,CAACgB,GAAG,CAACD,CAAC,CAAC,CAC/B,GAAIC,GAAG,EAAIA,GAAG,CAACC,UAAU,CAAC,eAAe,CAAC,CAAE,CAC1C,KAAM,CAAApB,WAAW,CAAGmB,GAAG,CAACE,OAAO,CAAC,eAAe,CAAE,EAAE,CAAC,CACpDJ,QAAQ,CAACjB,WAAW,CAAC,CAAGG,YAAY,CAACC,OAAO,CAACe,GAAG,CAAC,EAAI,EAAE,CACzD,CACF,CAEAd,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAEgB,MAAM,CAACC,IAAI,CAACN,QAAQ,CAAC,CAAC,CACvE,MAAO,CAAAA,QAAQ,CACjB,CAAE,MAAOT,CAAC,CAAE,CACVH,OAAO,CAACI,KAAK,CAAC,uCAAuC,CAAED,CAAC,CAAC,CACzD,MAAO,CAAC,CAAC,CACX,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}